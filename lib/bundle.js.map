{"version":3,"sources":["webpack:///webpack/bootstrap 1f728de53f50abb2d850","webpack:///./lib/cellular_automaton.js","webpack:///./lib/game.js","webpack:///./lib/cell.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,IAAG;;AAEH;AACA,EAAC;;;;;;;ACxCD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;;;;;;;AC5EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;;AAGA;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAkC,mBAAmB,IAAI,mBAAmB,IAAI,mBAAmB;AACnG,sCAAqC,SAAS,IAAI,SAAS,IAAI,SAAS;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1f728de53f50abb2d850\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n  const gameView = new GameView(game, ctx)\n  gameView.game.setup();\n  let rate = 60;\n  let rain = false;\n  gameView.start(rate, rain);\n\n  document.addEventListener(\"keydown\", function(e){\n    const code = e.keyCode\n\n    if (code === 87) {\n      rain = true;\n      gameView.start(rate, rain);\n    } else if (code === 83) {\n      rain = false;\n      gameView.start(rate, rain);\n    } else if (code === 68) {\n      if (rate <= 90) {\n        rate += 10;\n        gameView.start(rate, rain);\n      }\n    } else if (code === 65) {\n      if (rate > 10) {\n        rate -= 10;\n        gameView.start(rate, rain);\n      }\n    }\n\n  })\n\n  canvasEl.addEventListener(\"click\", gameView.restart.bind(gameView), false);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cellular_automaton.js\n ** module id = 0\n ** module chunks = 0\n **/","const Cell = require('./cell');\n\nconst Game = function() {\n  this.grid = [];\n};\n\nGame.DIM_X = 1200;\nGame.DIM_Y = 540;\nGame.NumColumns = 80;\nGame.NumRows = 36;\nGame.cellWidth = Game.DIM_X / Game.NumColumns;\nGame.cellHeight = Game.DIM_Y / Game.NumRows;\nGame.minDist = 8;\nGame.minDistSquare = Game.minDist * Game.minDist;\nGame.sepNorm = 4;\n\nGame.DIRS = [[-1, -1],\n             [ 0, -1],\n             [ 1, -1],\n             [-1,  0],\n             [ 1,  0],\n             [-1,  1],\n             [ 0,  1],\n             [ 1,  1]];\n\n// Game.DIRS = [[ 0, -1],\n//              [-1,  0],\n//              [ 1,  0],\n//              [ 0,  1]];\n\nGame.prototype.inBounds = function (i, j) {\n  return this.grid[i] && this.grid[i][j];\n};\n\nGame.prototype.setup = function () {\n  for (let i = 0; i < Game.NumRows; i++) {\n    this.grid.push([]);\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let r = Math.random() * 255;\n      let g = Math.random() * 255;\n      let b = Math.random() * 255;\n      let options = { x: j * Game.DIM_X /    Game.NumColumns,\n                      y: i * Game.DIM_Y / Game.NumRows,\n                      r: r,\n                      g: g,\n                      b: b,\n                      tempR: r,\n                      tempG: g,\n                      tempB: b,\n                      rVel: 0,\n                      gVel: 0,\n                      bVel: 0,\n                      tempRVel: 0,\n                      tempGVel: 0,\n                      tempBVel: 0,\n                      neighbors: []\n                    }\n      let cell = new Cell(options);\n      this.grid[i].push(cell);\n    }\n  }\n\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.grid[i][j]\n      Game.DIRS.forEach((dir) => {\n        let newI = i + dir[0];\n        let newJ = j + dir[1];\n        if (this.inBounds(newI, newJ)) {\n          cell.neighbors.push(this.grid[newI][newJ])\n        }\n      })\n    }\n  }\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","// const Game = require('./game');\n\nconst Cell = function(options) {\n  this.x = options.x;\n  this.y = options.y;\n  this.r = options.r;\n  this.g = options.g;\n  this.b = options.b;\n  this.tempR = options.tempR;\n  this.tempG = options.tempG;\n  this.tempB = options.tempB;\n  this.rVel = options.rVel;\n  this.gVel = options.gVel;\n  this.bVel = options.bVel;\n  this.tempRVel = options.tempRVel;\n  this.tempGVel = options.tempGVel;\n  this.tempBVel = options.tempBVel;\n  this.neighbors = options.neighbors;\n};\n\nCell.ease = 0.67;\n\nCell.prototype.updateTempRVel = function (rAve, rVelAve, rSep) {\n  this.tempRVel += Cell.ease * (rAve + rVelAve + rSep - this.r - this.tempRVel);\n};\n\nCell.prototype.updateTempGVel = function (gAve, gVelAve, gSep) {\n  this.tempGVel += Cell.ease * (gAve + gVelAve + gSep - this.g - this.tempGVel);\n};\n\nCell.prototype.updateTempBVel = function (bAve, bVelAve, bSep) {\n  this.tempBVel += Cell.ease * (bAve + bVelAve + bSep - this.b - this.tempBVel);\n};\n//\n// Cell.prototype.clamp = function () {\n//   if ((mag = Math.sqrt(this.rVel*this.rVel + this.gVel*this.gVel + this.bVel*this.bVel))> 255) {\n//       this.rVel *= (f = 255/mag);\n//       this.gVel *= f;\n//       this.bVel *= f;\n//     }\n// };\n\nCell.prototype.updateTempColors = function () {\n  this.tempR += this.tempRVel;\n  this.tempG += this.tempGVel;\n  this.tempB += this.tempBVel;\n};\n\nCell.prototype.addWind = function (windVel) {\n  this.tempR += windVel;\n  this.tempG += windVel;\n  this.tempB += windVel;\n};\n\nCell.prototype.bounceOffSmooth = function () {\n  if (this.tempR < 0) {\n    this.tempR = 0;\n    this.tempRVel *= -1;\n  } else if (this.tempR > 255) {\n    this.tempR = 255;\n    this.tempRVel *= -1;\n  }\n  if (this.tempG < 0) {\n    this.tempG = 0;\n    this.tempGVel *= -1;\n  } else if (this.tempG > 255) {\n    this.tempG = 255;\n    this.tempGVel *= -1;\n  }\n  if (this.tempB < 0) {\n    this.tempB = 0;\n    this.tempBVel *= -1;\n  } else if (this.tempB > 255) {\n    this.tempB = 255;\n    this.tempBVel *= -1;\n  }\n};\n\nCell.prototype.bounceOffRipple = function () {\n  if (this.tempR < 0) {\n    this.tempR = -this.tempR;\n    this.tempRVel += 255;\n  } else if (this.tempR > 255) {\n    this.tempR = 511 - this.tempR;\n    this.tempRVel -= 255;\n  }\n  if (this.tempG < 0) {\n    this.tempG = -this.tempG;\n    this.tempGVel += 255;\n  } else if (this.tempG > 255) {\n    this.tempG = 511 - this.tempG;\n    this.tempGVel -= 255;\n  }\n  if (this.tempB < 0) {\n    this.tempB = -this.tempB;\n    this.tempBVel += 255;\n  } else if (this.tempB > 255) {\n    this.tempB = 511 - this.tempB;\n    this.tempBVel -= 255;\n  }\n};\n\n\nmodule.exports = Cell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cell.js\n ** module id = 2\n ** module chunks = 0\n **/","const Game = require('./game');\nconst GameView = function (game, ctx) {\n  this.ctx = ctx;\n  this.game = game;\n  this.interval = null;\n};\n\nGameView.prototype.start = function(rate, rain) {\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n  timeStep = 1000/rate;\n  this.interval = setInterval(this.step.bind(this, rain), timeStep);\n\n  this.clearInstructions();\n  this.renderStats(rain, rate);\n  this.renderRainButton(rain);\n  this.renderSpeedButtons(rate);\n};\n\nGameView.prototype.restart = function (e) {\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.game.grid[i][j];\n      cell.r = cell.tempR = Math.random() * 255;\n      cell.g = cell.tempG = Math.random() * 255;\n      cell.b = cell.tempG = Math.random() * 255;\n      cell.rVel = this.tempRVel = 0;\n      cell.gVel = this.tempGVel = 0;\n      cell.bVel = this.tempBVel = 0;\n    }\n  }\n};\n\nGameView.prototype.setTempValues = function(rain) {\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.game.grid[i][j];\n      let rAve = 0;\n      let gAve = 0;\n      let bAve = 0;\n      let rVelAve = 0;\n      let gVelAve = 0;\n      let bVelAve = 0;\n      let rSep = 0;\n      let gSep = 0;\n      let bSep = 0;\n      let numNeighbors = cell.neighbors.length;\n      for (let k = 0; k < numNeighbors; k++) {\n        let neighbor = cell.neighbors[k];\n        rAve += neighbor.r;\n        gAve += neighbor.g;\n        bAve += neighbor.b;\n        rVelAve += neighbor.rVel;\n        gVelAve += neighbor.gVel;\n        bVelAve += neighbor.bVel;\n        let dr = cell.r - neighbor.r;\n        let dg = cell.g - neighbor.g;\n        let db = cell.b - neighbor.b;\n        if ((dr*dr + dg*dg + db*db) < Game.minDistSquare) {\n          rSep += dr;\n          gSep += dg;\n          bSep += db;\n        }\n      }\n\n      rAve *= 1/numNeighbors;\n      gAve *= 1/numNeighbors;\n      bAve *= 1/numNeighbors;\n      rVelAve *= 1/numNeighbors;\n      gVelAve *= 1/numNeighbors;\n      bVelAve *= 1/numNeighbors;\n\n      if (rSep !== 0 || gSep !== 0 || bSep !== 0) {\n        rSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n        gSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n        bSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n      }\n\n      cell.updateTempRVel(rAve, rVelAve, rSep);\n      cell.updateTempGVel(gAve, gVelAve, gSep);\n      cell.updateTempBVel(bAve, bVelAve, bSep);\n      // cell.clamp();\n      cell.updateTempColors();\n      if (rain) {\n        cell.bounceOffRipple();\n      } else {\n        cell.bounceOffSmooth();\n      }\n    }\n  }\n};\n\nGameView.prototype.step = function(rain) {\n  this.setTempValues(rain);\n\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.game.grid[i][j];\n      cell.rVel = cell.tempRVel;\n      cell.gVel = cell.tempGVel;\n      cell.bVel = cell.tempBVel;\n\n      cell.r = cell.tempR;\n      cell.g = cell.tempG;\n      cell.b = cell.tempB;\n\n      this.ctx.fillStyle = `rgb(${Math.floor(cell.r)}, ${Math.floor(cell.g)}, ${Math.floor(cell.b)})`;\n      // this.ctx.fillStyle = `rgb(${~~cell.r}, ${~~cell.g}, ${~~cell.b})`;\n      this.ctx.fillRect(cell.x, cell.y, Game.cellWidth, Game.cellHeight);\n    }\n  }\n};\n\nGameView.prototype.clearInstructions = function () {\n  const nodes = document.getElementsByClassName(\"instructions\");\n  const $instructions = $(nodes[0]);\n  $instructions.empty();\n};\n\nGameView.prototype.renderRainButton = function(rain){\n  const nodes = document.getElementsByClassName(\"instructions\");\n  const $instructions = $(nodes[0]);\n  // $rain = $(\"<div>\").addClass(\"instruction\");\n  // $rain.append(\"Rippling effect: \");\n  // if (rain) {\n  //   $rain.append(\"ON\");\n  // } else {\n  //   $rain.append(\"OFF\");\n  // }\n  // $instructions.append($rain);\n\n  $button = $(\"<div>\").addClass(\"instruction\");\n  $key = $(\"<span>\").addClass(\"key\");\n  if (rain) {\n    $key.text(\"s\");\n    $button.append($key);\n    $button.append(\"stop ripples\");\n  } else {\n    $key.text(\"w\");\n    $button.append($key);\n    $button.append(\"add ripples\");\n  }\n  $instructions.append($button);\n};\n\nGameView.prototype.renderSpeedButtons = function (rate) {\n  const nodes = document.getElementsByClassName(\"instructions\");\n  const $instructions = $(nodes[0]);\n  // $speed = $(\"<div>\").addClass(\"instruction\");\n  // $speed.text(\"Current speed: \" + rate + \" FPS\");\n  // $instructions.append($speed);\n\n  $increase = $(\"<div>\").addClass(\"instruction\");\n  $decrease = $(\"<div>\").addClass(\"instruction\");\n  $incKey = $(\"<span>\").addClass(\"key\");\n  $decKey = $(\"<span>\").addClass(\"key\");\n  if (rate > 10) {\n    $decKey.text(\"a\");\n    $decrease.append($decKey);\n    $decrease.append(\"decrease speed\");\n    $instructions.append($decrease);\n  }\n  if (rate <= 90) {\n    $incKey.text(\"d\");\n    $increase.append($incKey);\n    $increase.append(\"increase speed\");\n    $instructions.append($increase);\n    $instructions.append($increase);\n  }\n\n};\n\nGameView.prototype.renderStats = function (rain, rate) {\n  const nodes = document.getElementsByClassName(\"instructions\");\n  const $instructions = $(nodes[0]);\n  $rain = $(\"<div>\").addClass(\"instruction\");\n  $rain.append(\"Rippling effect: \");\n  if (rain) {\n    $rain.append(\"ON\");\n  } else {\n    $rain.append(\"OFF\");\n  }\n  $instructions.append($rain);\n\n  $speed = $(\"<div>\").addClass(\"instruction\");\n  $speed.text(\"Current speed: \" + rate + \" FPS\");\n  $instructions.append($speed);\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}