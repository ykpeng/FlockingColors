{"version":3,"sources":["webpack:///webpack/bootstrap 63a49663d00b85ee9245","webpack:///./lib/cellular_automaton.js","webpack:///./lib/game.js","webpack:///./lib/cell.js","webpack:///./lib/game_view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACbD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC;AACA,oBAAmB,qBAAqB;AACxC,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;;;;;;;ACnEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;;AAGA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,kBAAkB;AACnC,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAqC,mBAAmB,IAAI,mBAAmB,IAAI,mBAAmB;AACtG,mCAAkC,SAAS,IAAI,SAAS,IAAI,SAAS;AACrE;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 63a49663d00b85ee9245\n **/","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  const canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.DIM_X;\n  canvasEl.height = Game.DIM_Y;\n\n  const ctx = canvasEl.getContext(\"2d\");\n  const game = new Game();\n  const gameView = new GameView(game, ctx)\n  gameView.start();\n  canvasEl.addEventListener(\"click\", gameView.restart.bind(gameView), false);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cellular_automaton.js\n ** module id = 0\n ** module chunks = 0\n **/","const Cell = require('./cell');\n\nconst Game = function() {\n  this.grid = [];\n};\n\nGame.DIM_X = 900;\nGame.DIM_Y = 540;\nGame.NumColumns = 60;\nGame.NumRows = 36;\nGame.cellWidth = Game.DIM_X / Game.NumColumns;\nGame.cellHeight = Game.DIM_Y / Game.NumRows;\nGame.minDist = 8;\nGame.minDistSquare = Game.minDist * Game.minDist;\nGame.sepNorm = 4;\n\nGame.DIRS = [[-1, -1],\n             [ 0, -1],\n             [ 1, -1],\n             [-1,  0],\n             [ 1,  0],\n             [-1,  1],\n             [ 0,  1],\n             [ 1,  1]];\n\n// Game.DIRS = [[ 0, -1],\n//              [-1,  0],\n//              [ 1,  0],\n//              [ 0,  1]];\n\nGame.prototype.inBounds = function (i, j) {\n  return this.grid[i] && this.grid[i][j];\n};\n\nGame.prototype.setup = function () {\n  for (let i = 0; i < Game.NumRows; i++) {\n    this.grid.push([]);\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let options = { x: j * Game.DIM_X / Game.NumColumns,\n                      y: i * Game.DIM_Y / Game.NumRows,\n                      r: Math.random() * 255,\n                      g: Math.random() * 255,\n                      b: Math.random() * 255,\n                      rVel: 0,\n                      gVel: 0,\n                      bVel: 0,\n                      neighbors: []\n                    }\n      let cell = new Cell(options);\n      this.grid[i].push(cell);\n    }\n  }\n\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.grid[i][j]\n      Game.DIRS.forEach((dir) => {\n        let newI = i + dir[0];\n        let newJ = j + dir[1];\n        if (this.inBounds(newI, newJ)) {\n          cell.neighbors.push(this.grid[newI][newJ])\n        }\n      })\n    }\n  }\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 1\n ** module chunks = 0\n **/","// const Game = require('./game');\n\nconst Cell = function(options) {\n  this.x = options.x;\n  this.y = options.y;\n  this.r = options.r;\n  this.g = options.g;\n  this.b = options.b;\n  this.rVel = options.rVel;\n  this.gVel = options.gVel;\n  this.bVel = options.bVel;\n  this.neighbors = options.neighbors;\n};\n\nCell.ease = 0.67;\n\nCell.prototype.updateRVel = function (rAve, rVelAve, rSep) {\n  this.rVel += Cell.ease * (rAve + rVelAve + rSep - this.r - this.rVel);\n};\n\nCell.prototype.updateGVel = function (gAve, gVelAve, gSep) {\n  this.gVel += Cell.ease * (gAve + gVelAve + gSep - this.g - this.gVel);\n};\n\nCell.prototype.updateBVel = function (bAve, bVelAve, bSep) {\n  this.bVel += Cell.ease * (bAve + bVelAve + bSep - this.b - this.bVel);\n};\n\nCell.prototype.clamp = function () {\n  if ((mag = Math.sqrt(this.rVel*this.rVel + this.gVel*this.gVel + this.bVel*this.bVel))> 255) {\n      this.rVel *= (f = 255/mag);\n      this.gVel *= f;\n      this.bVel *= f;\n      console.log(\"clamped\");\n    }\n};\n\nCell.prototype.updateColors = function () {\n  this.r += this.rVel;\n  this.g += this.gVel;\n  this.b += this.bVel;\n};\n\nCell.prototype.bounceOff = function () {\n  if (this.r < 0) {\n    this.r = 0;\n    this.rVel *= -1;\n  } else if (this.r > 255) {\n    this.r = 255;\n    this.rVel *= -1;\n  }\n  if (this.g < 0) {\n    this.g = 0;\n    this.gVel *= -1;\n  } else if (this.g > 255) {\n    this.g = 255;\n    this.gVel *= -1;\n  }\n  if (this.b < 0) {\n    this.b = 0;\n    this.bVel *= -1;\n  } else if (this.b > 255) {\n    this.b = 255;\n    this.bVel *= -1;\n  }\n};\n\n\nmodule.exports = Cell;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cell.js\n ** module id = 2\n ** module chunks = 0\n **/","const Game = require('./game');\nconst GameView = function (game, ctx) {\n  this.ctx = ctx;\n  this.game = game;\n};\n\nGameView.prototype.start = function () {\n  //start the animation\n  this.game.setup();\n  setInterval(this.step.bind(this), 1000/30);\n};\n\nGameView.prototype.restart = function (e) {\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.game.grid[i][j];\n      cell.r = Math.random() * 255;\n      cell.g = Math.random() * 255;\n      cell.b = Math.random() * 255;\n      cell.rVel = 0;\n      cell.gVel = 0;\n      cell.bVel = 0;\n    }\n  }\n};\n\nGameView.prototype.step = function () {\n  for (let i = 0; i < Game.NumRows; i++) {\n    for (let j = 0; j < Game.NumColumns; j++) {\n      let cell = this.game.grid[i][j];\n      let rAve = 0;\n      let gAve = 0;\n      let bAve = 0;\n      let rVelAve = 0;\n      let gVelAve = 0;\n      let bVelAve = 0;\n      let rSep = 0;\n      let gSep = 0;\n      let bSep = 0;\n      let numNeighbors = cell.neighbors.length;\n      for (let k = 0; k < numNeighbors; k++) {\n        let neighbor = cell.neighbors[k];\n        rAve += neighbor.r;\n        gAve += neighbor.g;\n        bAve += neighbor.b;\n        rVelAve += neighbor.rVel;\n        gVelAve += neighbor.gVel;\n        bVelAve += neighbor.bVel;\n        let dr = cell.r - neighbor.r;\n        let dg = cell.g - neighbor.g;\n        let db = cell.b - neighbor.b;\n        if ((dr*dr + dg*dg + db*db) < Game.minDistSquare) {\n          rSep += dr;\n          gSep += dg;\n          bSep += db;\n        }\n      }\n\n      rAve *= 1/numNeighbors;\n      gAve *= 1/numNeighbors;\n      bAve *= 1/numNeighbors;\n      rVelAve *= 1/numNeighbors;\n      gVelAve *= 1/numNeighbors;\n      bVelAve *= 1/numNeighbors;\n      debugger\n      if (rSep !== 0 || gSep !== 0 || bSep !== 0) {\n        rSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n        gSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n        bSep *= Game.sepNorm / Math.sqrt(rSep*rSep + gSep*gSep + bSep*bSep);\n      }\n\n      cell.updateRVel(rAve, rVelAve, rSep);\n      cell.updateGVel(gAve, gVelAve, gSep);\n      cell.updateBVel(bAve, bVelAve, bSep);\n      // cell.clamp();\n      cell.updateColors();\n      cell.bounceOff();\n\n      // this.ctx.fillStyle = `rgb(${Math.floor(cell.r)}, ${Math.floor(cell.g)}, ${Math.floor(cell.b)})`;\n      this.ctx.fillStyle = `rgb(${~~cell.r}, ${~~cell.g}, ${~~cell.b})`;\n      this.ctx.fillRect(cell.x, cell.y, Game.cellWidth, Game.cellHeight);\n    }\n  }\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game_view.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}